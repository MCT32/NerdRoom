IF YOURE READING THIS IT MEANS IT DIDNT PROPERLY GET ADDED TO THE GITIGNORE. 

I need to architect this. The main idea is:

I have a library that lets me make a config, create a connection, join a channel, and execute
certain commands. As a general outline, I need to provide the following;

- a main loop, constantly checking to see if input is present. If input is present, then do
  something. What is that something?? 
    - If it's a terminal resize, set the new terminal height and width to the h and w values
      respectively, and rerender. That is a render event. (More on this later)
    - If it's any key, append that key to a vector called 'prompt'.
    - If it's any key + a modifier, then execute a function that will correspond to what that
      key + modifier pair is. For example, CTRL + C to exit the program, CTRL + Q, to exit 
      the current channel, etc etc etc...
    - If it's the enter key, send the current prompt to the prompt lexer. The prompt lexer
      will be responsible for the bulk of the frontend prompt computing, deciding wether the
      message is a message, IRC command, or NerdRoom command. After this is done, clear the 
      prompt, and rerender. This is a rerender event. 

- The command lexer. The command lexer will be a function that can be called, and will take
  the arguments "prompt", and return the code that needs to be executed. I'm still not entirely
  sure what the best way to do this is, but here's my crack at it;
    - If the "prompt" (users message ) starts with a "/", it is a command. There are a variety 
      of commands. Here lies the index of all the possible commands, and their functions.
        - "/conf <arg> <arg> <arg> " sets the IRC configuration. This should NOT immediately 
          connect to the IRC server, only configure the connection. This will take 3 arguments;
            - nickname : this argument sets the user nickname. this nickname set by the user
              is then cloned to all 4 user fields. This will eventually change, but for now 
              /conf will do the heavy lifting here.
            - address  : this argument will be the servers address. For example; "irc.libera.chat"
              this arg will be passed to the .host field in Seths config constructor. 
            - port     : this argument will tell the .host field what port to try and connect to
              the server on. Usually port 6667, not sure why youd want to use anything else unless
              you were encrypting, But that will come later.
        - "/connect" this is a fucking STUPID way to do this and I'd hazard a guess that I'm
          going to be changing it pretty soon, but this will connect using the current configuration.
          There will be a "connect" method that this calls. I'm not sure how I'm going to get the 
          configuration past the borrow checker and to this method, but I'll burn that bridge when 
          I get to it. (retrospectively that was stupid, config is gonna return that shit anyway)
        - "/join <arg>" tells the "join_channel" function which channel on the server to join. 
          This definitely needs robust error handling, because if the channel doesnt exist 
          I dont want the thread to just fucking panic. 
        - "/part" this command will take zero argument (i think), and will function as a simple
          method to leave the current channel. This will spit you back out as if you had just 
          typed in the "/connect" command.
        - "/quit" this command will leave the server, using the IRC protocol's built in QUIT command.
          I could probably get away with just sending that raw, but I'm gonna use Seths operation.
        - MORE TO COME EVENTUALLY, THIS IS A GOOD ENOUGH SKELETON FOR ME.
    - If the users "prompt" doesnt start with anything, just call the function that sends the
      plaintext to Seth's "send" command.
      (thanks seth <3)

- vector_vendor (haha see what i did there) will take any String that is passed to it, and push
  it to the global chat vector, which holds the entire chat history. This doesnt print anything.
  With the vector updated, it can now be printed using the express_chat method.

- express_chat will be responsible for printing the vector to the screen. It will do all of the 
  necessary math to print out the chat vector properly. It will do all of the following: 
    - obtain the updated vector to be written
    - do all of the math to figure out where all of the messages need to be printed
      based on the terminal size, which will be constantly updated.
    - clear the screen
    - this is a re-render event. 
    
- on_message_received will do a couple of things. We need to parse the incoming message into 
  a prettier string before it's appended to the global chats vector, turning whatever it comes in 
  into something like "<cockface> noinkus". This will then be appended to the global chats vector,
  using the vector_vendor. 

- configuration_command will create an IRC configuration, without connecting to the server. 
  
- connect_command will create an irc connection to a server with the current irc configuration. 

- join_command will join a specific channel in the current server.

- part_command will leave the current channel, taking no arguments.

- quit_command will leave the current server. 

- send_message will send the current prompt, 
